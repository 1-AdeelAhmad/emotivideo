{"version":3,"sources":["Components/LoadModels.js","Components/CameraFeed.js","Components/Title.js","Components/CurrentEmotion.js","App.js","serviceWorker.js","index.js"],"names":["loadModels","a","MODEL_URL","process","faceapi","CameraFeed","componentDidMount","videoFeed","startCanvasFeed","interval","setInterval","canvasFeed","componentWillUnmount","clearInterval","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","stream","setState","videoPlayer","srcObject","play","catch","err","console","log","canvasFeedRef","current","getContext","drawImage","document","getElementById","canvas","withFaceLandmarks","withAgeAndGender","withFaceExpressions","detections","dimensions","resizedDimensions","drawFaceExpressions","emotion","Object","keys","expressions","find","key","props","getCurrentEmotion","state","React","createRef","classes","this","Paper","elevation","variant","className","root","style","maxWidth","id","ref","Component","withStyles","theme","flexGrow","margin","marginTop","marginBottom","useStyles","makeStyles","menuButton","marginRight","spacing","title","subtitle","fontStyle","Title","AppBar","position","color","borderTopRightRadius","borderTopLeftRadius","Toolbar","Typography","Button","align","display","CurrentEmotion","paddingTop","paddingBottom","padding","App","Container","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.714587e4.chunk.js","sourcesContent":["import * as faceapi from 'face-api.js';\n\nexport async function loadModels () {\n    const MODEL_URL = process.env.PUBLIC_URL + '/models';\n\n    await faceapi.loadFaceLandmarkModel(MODEL_URL);\n    await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n    await faceapi.loadFaceRecognitionModel(MODEL_URL);\n    await faceapi.loadFaceExpressionModel(MODEL_URL);\n    await faceapi.loadAgeGenderModel(MODEL_URL);\n    // console.log('load Models -->', faceapi.nets)\n}\n\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n    // tiny_face_detector options\n    let scoreThreshold = 0.5;\n    const OPTION = new faceapi.TinyFaceDetectorOptions({\n      inputSize,\n      scoreThreshold\n    });\n    const useTinyModel = true;\n  \n    // fetch image to api\n    let img = await faceapi.fetchImage(blob);\n  \n    // detect all faces and generate full description from image\n    // including landmark and descriptor of each face\n    let fullDesc = await faceapi\n      .detectAllFaces(img, OPTION)\n      .withFaceLandmarks(useTinyModel)\n      .withFaceDescriptors()\n      .withFaceExpressions()\n      .withAgeAndGender;\n    return fullDesc;\n  }","import React from 'react';\nimport { Paper, withStyles } from '@material-ui/core';\nimport { loadModels } from './LoadModels';\nimport * as faceapi from 'face-api.js';\n\n\nconst Styles = (theme => ({\n    root: {\n      flexGrow: 1,\n      margin: '0 auto',\n      width: '340px',\n      height: 'auto',\n    //   backgroundColor: 'rgba(0,0,0,0.85)',\n      marginTop: '1rem',\n      marginBottom: '1rem'\n    }\n  }));\n\n\nclass CameraFeed extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n        }\n\n        this.canvasFeedRef = React.createRef()\n    }\n    \n    componentDidMount = async () => {\n        await loadModels();\n        this.videoFeed();\n        this.startCanvasFeed();\n    }\n\n    startCanvasFeed = () => {\n        this.interval = setInterval( () => {\n            this.canvasFeed()\n        }, 100 )\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.interval)\n    }\n\n    videoFeed = () => {\n        const constraints = { audio: false, video: {width: '340', height: '180'} }\n        navigator.mediaDevices.getUserMedia(constraints)\n        .then( stream => {\n            this.setState({stream})\n            this.videoPlayer.srcObject = stream;\n            this.videoPlayer.play()\n        })\n        .catch(err => console.log(err))\n    }\n\n    canvasFeed = async () => {\n        const context = this.canvasFeedRef.current.getContext('2d')\n        context.drawImage(this.videoPlayer, 0,0, this.videoPlayer.width, this.videoPlayer.height);\n        \n        const video = document.getElementById('videoFeed');\n        const canvas = document.getElementById('canvasFeed');\n\n        const detections = await faceapi.detectAllFaces(video, \n            new faceapi.TinyFaceDetectorOptions())\n            .withFaceLandmarks()\n            .withAgeAndGender()\n            .withFaceExpressions()\n\n            const dimensions = {\n                width: this.videoPlayer.width,\n                height: this.videoPlayer.height\n            };\n\n            const resizedDimensions = faceapi.resizeResults(detections, dimensions)\n\n            // faceapi.draw.drawDetections(canvas, resizedDimensions)\n            // faceapi.draw.drawFaceLandmarks(canvas, resizedDimensions)\n            faceapi.draw.drawFaceExpressions(canvas, resizedDimensions)\n\n            const emotion = Object.keys(detections[0].expressions).find( key => detections[0].expressions[key] > 0.5 )\n\n            this.props.getCurrentEmotion(emotion)\n           \n\n        console.log('detections', detections)\n    }\n\n    \n    \n    render(){\n        const { classes, } = this.props;\n\n\n        return(\n            <Paper elevation={3} variant='outlined' className={classes.root}>\n                    <div style={{maxWidth:'100%'}}>\n                        <video id='videoFeed' ref={ref => (this.videoPlayer = ref)} width='340' height='180'  />\n                        <canvas id='canvasFeed' ref={this.canvasFeedRef} width='340' height='180'  />\n                    </div>\n                </Paper>\n                \n        )\n    }\n}\n\nexport default withStyles(Styles)(CameraFeed);","import React from 'react';\nimport { AppBar, Toolbar, Button, Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    subtitle: {\n        marginTop: '1rem',\n        marginBottom: '1rem',\n        fontStyle: 'italic'\n    }\n  }));\n\nconst Title = () => {\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <AppBar position=\"static\" color='primary' style={{borderTopRightRadius: '20px',borderTopLeftRadius: '20px' }}>\n                <Toolbar>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        Emoti Video\n                    </Typography>\n                    <Button color=\"inherit\">Name</Button>\n                </Toolbar>\n            </AppBar>\n            <Typography className={classes.subtitle} align='center' display='block' variant='button' >An App That Detects Facial Emotions In Real-Time</Typography>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport { Paper, Typography } from '@material-ui/core';\n\nconst CurrentEmotion = ({emotion}) => {\n    return(\n        <div style={{width: '75%', margin: '0 auto', paddingTop: '1rem', paddingBottom: '2rem'}}>\n            <Paper elevation={3} style={{padding: '1rem'}}>\n                <Typography align='center' variant='subtitle1'>Current Emotion:</Typography>\n                <Typography align='center' variant='h6'>{emotion}</Typography>\n            </Paper>\n        </div>\n    )\n}\n\nexport default CurrentEmotion;","import React from 'react';\nimport './App.css';\nimport { Container, Paper } from '@material-ui/core';\nimport CameraFeed from './Components/CameraFeed';\nimport Title from './Components/Title';\nimport CurrentEmotion from './Components/CurrentEmotion';\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state =  {\n            emotion: ''\n        }\n    }\n\n    getCurrentEmotion = (emotion) => {\n        this.setState({emotion})\n    }\n\n    render(){\n        return(\n            \n            <Container maxWidth='sm' style={{marginTop: '2rem', marginBottom: '2rem'}}>\n                <Paper elevation={3} style={{borderRadius: '20px'}}>\n                    <Title/>\n                    <hr style={{width: '60%'}}/>\n                    <CameraFeed getCurrentEmotion={this.getCurrentEmotion} />\n                    \n                    <hr style={{width: '60%'}}/>\n                    <CurrentEmotion emotion={this.state.emotion}/>\n                </Paper>\n            </Container>\n\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}